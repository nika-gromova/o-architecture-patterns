// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api.proto

package rules_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rules_ListRulesV1_FullMethodName   = "/rules.Rules/ListRulesV1"
	Rules_CreateRuleV1_FullMethodName  = "/rules.Rules/CreateRuleV1"
	Rules_UpdateRuleV1_FullMethodName  = "/rules.Rules/UpdateRuleV1"
	Rules_DeleteRuleV1_FullMethodName  = "/rules.Rules/DeleteRuleV1"
	Rules_GetRuleV1_FullMethodName     = "/rules.Rules/GetRuleV1"
	Rules_GetRedirectV1_FullMethodName = "/rules.Rules/GetRedirectV1"
)

// RulesClient is the client API for Rules service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RulesClient interface {
	ListRulesV1(ctx context.Context, in *ListRulesV1Request, opts ...grpc.CallOption) (*ListRulesV1Response, error)
	CreateRuleV1(ctx context.Context, in *CreateRuleV1Request, opts ...grpc.CallOption) (*CreateRuleV1Response, error)
	UpdateRuleV1(ctx context.Context, in *UpdateRuleV1Request, opts ...grpc.CallOption) (*UpdateRuleV1Response, error)
	DeleteRuleV1(ctx context.Context, in *DeleteRuleV1Request, opts ...grpc.CallOption) (*DeleteRuleV1Response, error)
	GetRuleV1(ctx context.Context, in *GetRuleV1Request, opts ...grpc.CallOption) (*GetRuleV1Response, error)
	GetRedirectV1(ctx context.Context, in *GetRedirectV1Request, opts ...grpc.CallOption) (*GetRedirectV1Response, error)
}

type rulesClient struct {
	cc grpc.ClientConnInterface
}

func NewRulesClient(cc grpc.ClientConnInterface) RulesClient {
	return &rulesClient{cc}
}

func (c *rulesClient) ListRulesV1(ctx context.Context, in *ListRulesV1Request, opts ...grpc.CallOption) (*ListRulesV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRulesV1Response)
	err := c.cc.Invoke(ctx, Rules_ListRulesV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) CreateRuleV1(ctx context.Context, in *CreateRuleV1Request, opts ...grpc.CallOption) (*CreateRuleV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRuleV1Response)
	err := c.cc.Invoke(ctx, Rules_CreateRuleV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) UpdateRuleV1(ctx context.Context, in *UpdateRuleV1Request, opts ...grpc.CallOption) (*UpdateRuleV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRuleV1Response)
	err := c.cc.Invoke(ctx, Rules_UpdateRuleV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) DeleteRuleV1(ctx context.Context, in *DeleteRuleV1Request, opts ...grpc.CallOption) (*DeleteRuleV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRuleV1Response)
	err := c.cc.Invoke(ctx, Rules_DeleteRuleV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) GetRuleV1(ctx context.Context, in *GetRuleV1Request, opts ...grpc.CallOption) (*GetRuleV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuleV1Response)
	err := c.cc.Invoke(ctx, Rules_GetRuleV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) GetRedirectV1(ctx context.Context, in *GetRedirectV1Request, opts ...grpc.CallOption) (*GetRedirectV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRedirectV1Response)
	err := c.cc.Invoke(ctx, Rules_GetRedirectV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RulesServer is the server API for Rules service.
// All implementations must embed UnimplementedRulesServer
// for forward compatibility.
type RulesServer interface {
	ListRulesV1(context.Context, *ListRulesV1Request) (*ListRulesV1Response, error)
	CreateRuleV1(context.Context, *CreateRuleV1Request) (*CreateRuleV1Response, error)
	UpdateRuleV1(context.Context, *UpdateRuleV1Request) (*UpdateRuleV1Response, error)
	DeleteRuleV1(context.Context, *DeleteRuleV1Request) (*DeleteRuleV1Response, error)
	GetRuleV1(context.Context, *GetRuleV1Request) (*GetRuleV1Response, error)
	GetRedirectV1(context.Context, *GetRedirectV1Request) (*GetRedirectV1Response, error)
	mustEmbedUnimplementedRulesServer()
}

// UnimplementedRulesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRulesServer struct{}

func (UnimplementedRulesServer) ListRulesV1(context.Context, *ListRulesV1Request) (*ListRulesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRulesV1 not implemented")
}
func (UnimplementedRulesServer) CreateRuleV1(context.Context, *CreateRuleV1Request) (*CreateRuleV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleV1 not implemented")
}
func (UnimplementedRulesServer) UpdateRuleV1(context.Context, *UpdateRuleV1Request) (*UpdateRuleV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuleV1 not implemented")
}
func (UnimplementedRulesServer) DeleteRuleV1(context.Context, *DeleteRuleV1Request) (*DeleteRuleV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuleV1 not implemented")
}
func (UnimplementedRulesServer) GetRuleV1(context.Context, *GetRuleV1Request) (*GetRuleV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleV1 not implemented")
}
func (UnimplementedRulesServer) GetRedirectV1(context.Context, *GetRedirectV1Request) (*GetRedirectV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedirectV1 not implemented")
}
func (UnimplementedRulesServer) mustEmbedUnimplementedRulesServer() {}
func (UnimplementedRulesServer) testEmbeddedByValue()               {}

// UnsafeRulesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RulesServer will
// result in compilation errors.
type UnsafeRulesServer interface {
	mustEmbedUnimplementedRulesServer()
}

func RegisterRulesServer(s grpc.ServiceRegistrar, srv RulesServer) {
	// If the following call pancis, it indicates UnimplementedRulesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rules_ServiceDesc, srv)
}

func _Rules_ListRulesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).ListRulesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rules_ListRulesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).ListRulesV1(ctx, req.(*ListRulesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_CreateRuleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).CreateRuleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rules_CreateRuleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).CreateRuleV1(ctx, req.(*CreateRuleV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_UpdateRuleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).UpdateRuleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rules_UpdateRuleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).UpdateRuleV1(ctx, req.(*UpdateRuleV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_DeleteRuleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).DeleteRuleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rules_DeleteRuleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).DeleteRuleV1(ctx, req.(*DeleteRuleV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_GetRuleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).GetRuleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rules_GetRuleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).GetRuleV1(ctx, req.(*GetRuleV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_GetRedirectV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedirectV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).GetRedirectV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rules_GetRedirectV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).GetRedirectV1(ctx, req.(*GetRedirectV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Rules_ServiceDesc is the grpc.ServiceDesc for Rules service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rules_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rules.Rules",
	HandlerType: (*RulesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRulesV1",
			Handler:    _Rules_ListRulesV1_Handler,
		},
		{
			MethodName: "CreateRuleV1",
			Handler:    _Rules_CreateRuleV1_Handler,
		},
		{
			MethodName: "UpdateRuleV1",
			Handler:    _Rules_UpdateRuleV1_Handler,
		},
		{
			MethodName: "DeleteRuleV1",
			Handler:    _Rules_DeleteRuleV1_Handler,
		},
		{
			MethodName: "GetRuleV1",
			Handler:    _Rules_GetRuleV1_Handler,
		},
		{
			MethodName: "GetRedirectV1",
			Handler:    _Rules_GetRedirectV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
