// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package rules_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RuleV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleV1MultiError, or nil if none found.
func (m *RuleV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for BaseLink

	for idx, item := range m.GetRedirects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleV1ValidationError{
						field:  fmt.Sprintf("Redirects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleV1ValidationError{
						field:  fmt.Sprintf("Redirects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleV1ValidationError{
					field:  fmt.Sprintf("Redirects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DefaultLink != nil {
		// no validation rules for DefaultLink
	}

	if len(errors) > 0 {
		return RuleV1MultiError(errors)
	}

	return nil
}

// RuleV1MultiError is an error wrapping multiple validation errors returned by
// RuleV1.ValidateAll() if the designated constraints aren't met.
type RuleV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleV1MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleV1MultiError) AllErrors() []error { return m }

// RuleV1ValidationError is the validation error returned by RuleV1.Validate if
// the designated constraints aren't met.
type RuleV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleV1ValidationError) ErrorName() string { return "RuleV1ValidationError" }

// Error satisfies the builtin error interface
func (e RuleV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleV1ValidationError{}

// Validate checks the field values on RedirectV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RedirectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedirectV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RedirectV1MultiError, or
// nil if none found.
func (m *RedirectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RedirectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFormula()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedirectV1ValidationError{
					field:  "Formula",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedirectV1ValidationError{
					field:  "Formula",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFormula()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedirectV1ValidationError{
				field:  "Formula",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedirectV1ValidationError{
					field:  "TargetLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedirectV1ValidationError{
					field:  "TargetLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedirectV1ValidationError{
				field:  "TargetLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RedirectV1MultiError(errors)
	}

	return nil
}

// RedirectV1MultiError is an error wrapping multiple validation errors
// returned by RedirectV1.ValidateAll() if the designated constraints aren't met.
type RedirectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedirectV1MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedirectV1MultiError) AllErrors() []error { return m }

// RedirectV1ValidationError is the validation error returned by
// RedirectV1.Validate if the designated constraints aren't met.
type RedirectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectV1ValidationError) ErrorName() string { return "RedirectV1ValidationError" }

// Error satisfies the builtin error interface
func (e RedirectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectV1ValidationError{}

// Validate checks the field values on FormulaV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FormulaV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormulaV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FormulaV1MultiError, or nil
// if none found.
func (m *FormulaV1) ValidateAll() error {
	return m.validate(true)
}

func (m *FormulaV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Expression

	if len(errors) > 0 {
		return FormulaV1MultiError(errors)
	}

	return nil
}

// FormulaV1MultiError is an error wrapping multiple validation errors returned
// by FormulaV1.ValidateAll() if the designated constraints aren't met.
type FormulaV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormulaV1MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormulaV1MultiError) AllErrors() []error { return m }

// FormulaV1ValidationError is the validation error returned by
// FormulaV1.Validate if the designated constraints aren't met.
type FormulaV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormulaV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormulaV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormulaV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormulaV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormulaV1ValidationError) ErrorName() string { return "FormulaV1ValidationError" }

// Error satisfies the builtin error interface
func (e FormulaV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormulaV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormulaV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormulaV1ValidationError{}

// Validate checks the field values on TargetLinkV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TargetLinkV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetLinkV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TargetLinkV1MultiError, or
// nil if none found.
func (m *TargetLinkV1) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetLinkV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Link

	if len(errors) > 0 {
		return TargetLinkV1MultiError(errors)
	}

	return nil
}

// TargetLinkV1MultiError is an error wrapping multiple validation errors
// returned by TargetLinkV1.ValidateAll() if the designated constraints aren't met.
type TargetLinkV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetLinkV1MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetLinkV1MultiError) AllErrors() []error { return m }

// TargetLinkV1ValidationError is the validation error returned by
// TargetLinkV1.Validate if the designated constraints aren't met.
type TargetLinkV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetLinkV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetLinkV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetLinkV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetLinkV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetLinkV1ValidationError) ErrorName() string { return "TargetLinkV1ValidationError" }

// Error satisfies the builtin error interface
func (e TargetLinkV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetLinkV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetLinkV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetLinkV1ValidationError{}

// Validate checks the field values on ListRulesV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRulesV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesV1RequestMultiError, or nil if none found.
func (m *ListRulesV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRulesV1RequestMultiError(errors)
	}

	return nil
}

// ListRulesV1RequestMultiError is an error wrapping multiple validation errors
// returned by ListRulesV1Request.ValidateAll() if the designated constraints
// aren't met.
type ListRulesV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesV1RequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesV1RequestMultiError) AllErrors() []error { return m }

// ListRulesV1RequestValidationError is the validation error returned by
// ListRulesV1Request.Validate if the designated constraints aren't met.
type ListRulesV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesV1RequestValidationError) ErrorName() string {
	return "ListRulesV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesV1RequestValidationError{}

// Validate checks the field values on ListRulesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRulesV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesV1ResponseMultiError, or nil if none found.
func (m *ListRulesV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRulesV1ResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRulesV1ResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRulesV1ResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRulesV1ResponseMultiError(errors)
	}

	return nil
}

// ListRulesV1ResponseMultiError is an error wrapping multiple validation
// errors returned by ListRulesV1Response.ValidateAll() if the designated
// constraints aren't met.
type ListRulesV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesV1ResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesV1ResponseMultiError) AllErrors() []error { return m }

// ListRulesV1ResponseValidationError is the validation error returned by
// ListRulesV1Response.Validate if the designated constraints aren't met.
type ListRulesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesV1ResponseValidationError) ErrorName() string {
	return "ListRulesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesV1ResponseValidationError{}

// Validate checks the field values on CreateRuleV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRuleV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRuleV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRuleV1RequestMultiError, or nil if none found.
func (m *CreateRuleV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRuleV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRuleV1RequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRuleV1RequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRuleV1RequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRuleV1RequestMultiError(errors)
	}

	return nil
}

// CreateRuleV1RequestMultiError is an error wrapping multiple validation
// errors returned by CreateRuleV1Request.ValidateAll() if the designated
// constraints aren't met.
type CreateRuleV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRuleV1RequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRuleV1RequestMultiError) AllErrors() []error { return m }

// CreateRuleV1RequestValidationError is the validation error returned by
// CreateRuleV1Request.Validate if the designated constraints aren't met.
type CreateRuleV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRuleV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRuleV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRuleV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRuleV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRuleV1RequestValidationError) ErrorName() string {
	return "CreateRuleV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRuleV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRuleV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRuleV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRuleV1RequestValidationError{}

// Validate checks the field values on CreateRuleV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRuleV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRuleV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRuleV1ResponseMultiError, or nil if none found.
func (m *CreateRuleV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRuleV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRuleV1ResponseMultiError(errors)
	}

	return nil
}

// CreateRuleV1ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRuleV1Response.ValidateAll() if the designated
// constraints aren't met.
type CreateRuleV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRuleV1ResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRuleV1ResponseMultiError) AllErrors() []error { return m }

// CreateRuleV1ResponseValidationError is the validation error returned by
// CreateRuleV1Response.Validate if the designated constraints aren't met.
type CreateRuleV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRuleV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRuleV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRuleV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRuleV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRuleV1ResponseValidationError) ErrorName() string {
	return "CreateRuleV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRuleV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRuleV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRuleV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRuleV1ResponseValidationError{}

// Validate checks the field values on UpdateRuleV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleV1RequestMultiError, or nil if none found.
func (m *UpdateRuleV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetRedirects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRuleV1RequestValidationError{
						field:  fmt.Sprintf("Redirects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRuleV1RequestValidationError{
						field:  fmt.Sprintf("Redirects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRuleV1RequestValidationError{
					field:  fmt.Sprintf("Redirects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DefaultLink != nil {

		if all {
			switch v := interface{}(m.GetDefaultLink()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRuleV1RequestValidationError{
						field:  "DefaultLink",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRuleV1RequestValidationError{
						field:  "DefaultLink",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDefaultLink()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRuleV1RequestValidationError{
					field:  "DefaultLink",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateRuleV1RequestMultiError(errors)
	}

	return nil
}

// UpdateRuleV1RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRuleV1Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateRuleV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleV1RequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleV1RequestMultiError) AllErrors() []error { return m }

// UpdateRuleV1RequestValidationError is the validation error returned by
// UpdateRuleV1Request.Validate if the designated constraints aren't met.
type UpdateRuleV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleV1RequestValidationError) ErrorName() string {
	return "UpdateRuleV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleV1RequestValidationError{}

// Validate checks the field values on UpdateRuleV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleV1ResponseMultiError, or nil if none found.
func (m *UpdateRuleV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRuleV1ResponseValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRuleV1ResponseValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleV1ResponseValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRuleV1ResponseMultiError(errors)
	}

	return nil
}

// UpdateRuleV1ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateRuleV1Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateRuleV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleV1ResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleV1ResponseMultiError) AllErrors() []error { return m }

// UpdateRuleV1ResponseValidationError is the validation error returned by
// UpdateRuleV1Response.Validate if the designated constraints aren't met.
type UpdateRuleV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleV1ResponseValidationError) ErrorName() string {
	return "UpdateRuleV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleV1ResponseValidationError{}

// Validate checks the field values on DeleteRuleV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRuleV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRuleV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRuleV1RequestMultiError, or nil if none found.
func (m *DeleteRuleV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRuleV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteRuleV1RequestMultiError(errors)
	}

	return nil
}

// DeleteRuleV1RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRuleV1Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteRuleV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRuleV1RequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRuleV1RequestMultiError) AllErrors() []error { return m }

// DeleteRuleV1RequestValidationError is the validation error returned by
// DeleteRuleV1Request.Validate if the designated constraints aren't met.
type DeleteRuleV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuleV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuleV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuleV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuleV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuleV1RequestValidationError) ErrorName() string {
	return "DeleteRuleV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRuleV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuleV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuleV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuleV1RequestValidationError{}

// Validate checks the field values on DeleteRuleV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRuleV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRuleV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRuleV1ResponseMultiError, or nil if none found.
func (m *DeleteRuleV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRuleV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRuleV1ResponseMultiError(errors)
	}

	return nil
}

// DeleteRuleV1ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRuleV1Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteRuleV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRuleV1ResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRuleV1ResponseMultiError) AllErrors() []error { return m }

// DeleteRuleV1ResponseValidationError is the validation error returned by
// DeleteRuleV1Response.Validate if the designated constraints aren't met.
type DeleteRuleV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuleV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuleV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuleV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuleV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuleV1ResponseValidationError) ErrorName() string {
	return "DeleteRuleV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRuleV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuleV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuleV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuleV1ResponseValidationError{}

// Validate checks the field values on GetRuleV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRuleV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuleV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRuleV1RequestMultiError, or nil if none found.
func (m *GetRuleV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuleV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetRuleV1RequestMultiError(errors)
	}

	return nil
}

// GetRuleV1RequestMultiError is an error wrapping multiple validation errors
// returned by GetRuleV1Request.ValidateAll() if the designated constraints
// aren't met.
type GetRuleV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuleV1RequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuleV1RequestMultiError) AllErrors() []error { return m }

// GetRuleV1RequestValidationError is the validation error returned by
// GetRuleV1Request.Validate if the designated constraints aren't met.
type GetRuleV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleV1RequestValidationError) ErrorName() string { return "GetRuleV1RequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRuleV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleV1RequestValidationError{}

// Validate checks the field values on GetRuleV1Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRuleV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuleV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRuleV1ResponseMultiError, or nil if none found.
func (m *GetRuleV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuleV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRuleV1ResponseValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRuleV1ResponseValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRuleV1ResponseValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRuleV1ResponseMultiError(errors)
	}

	return nil
}

// GetRuleV1ResponseMultiError is an error wrapping multiple validation errors
// returned by GetRuleV1Response.ValidateAll() if the designated constraints
// aren't met.
type GetRuleV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuleV1ResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuleV1ResponseMultiError) AllErrors() []error { return m }

// GetRuleV1ResponseValidationError is the validation error returned by
// GetRuleV1Response.Validate if the designated constraints aren't met.
type GetRuleV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleV1ResponseValidationError) ErrorName() string {
	return "GetRuleV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRuleV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleV1ResponseValidationError{}

// Validate checks the field values on GetRedirectV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRedirectV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRedirectV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRedirectV1RequestMultiError, or nil if none found.
func (m *GetRedirectV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRedirectV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetRedirectV1RequestMultiError(errors)
	}

	return nil
}

// GetRedirectV1RequestMultiError is an error wrapping multiple validation
// errors returned by GetRedirectV1Request.ValidateAll() if the designated
// constraints aren't met.
type GetRedirectV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRedirectV1RequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRedirectV1RequestMultiError) AllErrors() []error { return m }

// GetRedirectV1RequestValidationError is the validation error returned by
// GetRedirectV1Request.Validate if the designated constraints aren't met.
type GetRedirectV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRedirectV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRedirectV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRedirectV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRedirectV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRedirectV1RequestValidationError) ErrorName() string {
	return "GetRedirectV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRedirectV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRedirectV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRedirectV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRedirectV1RequestValidationError{}

// Validate checks the field values on GetRedirectV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRedirectV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRedirectV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRedirectV1ResponseMultiError, or nil if none found.
func (m *GetRedirectV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRedirectV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetRedirectV1ResponseMultiError(errors)
	}

	return nil
}

// GetRedirectV1ResponseMultiError is an error wrapping multiple validation
// errors returned by GetRedirectV1Response.ValidateAll() if the designated
// constraints aren't met.
type GetRedirectV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRedirectV1ResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRedirectV1ResponseMultiError) AllErrors() []error { return m }

// GetRedirectV1ResponseValidationError is the validation error returned by
// GetRedirectV1Response.Validate if the designated constraints aren't met.
type GetRedirectV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRedirectV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRedirectV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRedirectV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRedirectV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRedirectV1ResponseValidationError) ErrorName() string {
	return "GetRedirectV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRedirectV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRedirectV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRedirectV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRedirectV1ResponseValidationError{}
