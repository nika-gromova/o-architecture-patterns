// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nika-gromova/o-architecture-patterns/game/fuel (interfaces: UsingFuelObject)
//
// Generated by this command:
//
//	mockgen -destination fuel_obj.go -package mocks github.com/nika-gromova/o-architecture-patterns/game/fuel UsingFuelObject
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	base "github.com/nika-gromova/o-architecture-patterns/game/base"
	gomock "go.uber.org/mock/gomock"
)

// MockUsingFuelObject is a mock of UsingFuelObject interface.
type MockUsingFuelObject struct {
	ctrl     *gomock.Controller
	recorder *MockUsingFuelObjectMockRecorder
	isgomock struct{}
}

// MockUsingFuelObjectMockRecorder is the mock recorder for MockUsingFuelObject.
type MockUsingFuelObjectMockRecorder struct {
	mock *MockUsingFuelObject
}

// NewMockUsingFuelObject creates a new mock instance.
func NewMockUsingFuelObject(ctrl *gomock.Controller) *MockUsingFuelObject {
	mock := &MockUsingFuelObject{ctrl: ctrl}
	mock.recorder = &MockUsingFuelObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsingFuelObject) EXPECT() *MockUsingFuelObjectMockRecorder {
	return m.recorder
}

// GetFuel mocks base method.
func (m *MockUsingFuelObject) GetFuel() (base.FuelInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFuel")
	ret0, _ := ret[0].(base.FuelInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetFuel indicates an expected call of GetFuel.
func (mr *MockUsingFuelObjectMockRecorder) GetFuel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuel", reflect.TypeOf((*MockUsingFuelObject)(nil).GetFuel))
}

// SetFuel mocks base method.
func (m *MockUsingFuelObject) SetFuel(f base.FuelInfo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFuel", f)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetFuel indicates an expected call of SetFuel.
func (mr *MockUsingFuelObjectMockRecorder) SetFuel(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFuel", reflect.TypeOf((*MockUsingFuelObject)(nil).SetFuel), f)
}
